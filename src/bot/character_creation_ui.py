import telebot
from telebot import types
from src.core.character.races import RaceType
from src.core.character.classes import ClassType
from src.core.character.backgrounds import BackgroundType
from src.core.character.generator import CharacterGenerator

class CharacterCreationUI:
    def __init__(self, bot):
        self.bot = bot
        self.user_states = {}
    
    def start_character_creation(self, message):
        """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        markup = types.ReplyKeyboardMarkup(row_width=2)
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Ä–∞—Å
        for race in RaceType:
            markup.add(types.KeyboardButton(race.value))
        
        self.bot.send_message(
            message.chat.id, 
            "üé≤ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", 
            reply_markup=markup
        )
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[message.from_user.id] = {
            'step': 'race_selection',
            'character_data': {}
        }
    
    def handle_race_selection(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—ã"""
        try:
            race = next(r for r in RaceType if r.value == message.text)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–ª–∞—Å—Å–æ–≤
            markup = types.ReplyKeyboardMarkup(row_width=2)
            for char_class in ClassType:
                markup.add(types.KeyboardButton(char_class.value))
            
            self.bot.send_message(
                message.chat.id, 
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞—Å—É: {race.value}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", 
                reply_markup=markup
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.user_states[message.from_user.id]['step'] = 'class_selection'
            self.user_states[message.from_user.id]['character_data']['race'] = race
        
        except StopIteration:
            self.bot.send_message(
                message.chat.id, 
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Ä–∞—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
    
    def handle_class_selection(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞"""
        try:
            character_class = next(
                c for c in ClassType if c.value == message.text
            )
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–π
            markup = types.ReplyKeyboardMarkup(row_width=2)
            for background in BackgroundType:
                markup.add(types.KeyboardButton(background.value))
            
            self.bot.send_message(
                message.chat.id, 
                f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–ª–∞—Å—Å: {character_class.value}. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é:", 
                reply_markup=markup
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.user_states[message.from_user.id]['step'] = 'background_selection'
            self.user_states[message.from_user.id]['character_data']['class'] = character_class
        
        except StopIteration:
            self.bot.send_message(
                message.chat.id, 
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
    
    def handle_background_selection(self, message):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        try:
            background = next(
                b for b in BackgroundType if b.value == message.text
            )
            
            user_state = self.user_states.get(message.from_user.id, {})
            character_data = user_state.get('character_data', {})
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            character = CharacterGenerator.generate_character(
                name=message.from_user.first_name,
                race=character_data.get('race'),
                character_class=character_data.get('class'),
                background=background
            )
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            response = self.format_character_description(character)
            
            self.bot.send_message(
                message.chat.id, 
                response
            )
            
            # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            del self.user_states[message.from_user.id]
        
        except StopIteration:
            self.bot.send_message(
                message.chat.id, 
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
    
    def format_character_description(self, character):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        return (
            f"üéâ –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–ò–º—è: {character.name}\n"
            f"–†–∞—Å–∞: {character.race.name.value}\n"
            f"–ö–ª–∞—Å—Å: {character.character_class.name.value}\n"
            f"–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è: {character.background.name.value}\n\n"
            "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
            # –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –≤—ã–≤–æ–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
        )
