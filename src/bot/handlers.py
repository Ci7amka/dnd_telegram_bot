import telebot
import os
import random
from dotenv import load_dotenv
from telebot.types import Message, CallbackQuery

from src.core.dice_roller import DiceRoller
from src.core.character_generator import CharacterGenerator
from src.database.sqlite_db import CharacterDatabase
from src.bot.keyboards import CharacterKeyboards

load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(BOT_TOKEN)

db = CharacterDatabase()
user_states = {}
user_characters = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
CHARACTER_CREATION_STATES = {
    'waiting_for_name': 'name',
    'waiting_for_race': 'race',
    'waiting_for_class': 'class'
}

@bot.message_handler(commands=['start'])
def send_welcome(message: Message):
    user_id = message.from_user.id
    bot.reply_to(
        message, 
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è D&D. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=CharacterKeyboards.main_menu()
    )
    # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if user_id in user_states:
        del user_states[user_id]
    if user_id in user_characters:
        del user_characters[user_id]

@bot.message_handler(func=lambda m: m.text == "üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞")
def dice_roll_handler(message: Message):
    bot.reply_to(
        message, 
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—É–±–∏–∫–∞:", 
        reply_markup=CharacterKeyboards.dice_selection()
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('dice_'))
def dice_type_selection(call: CallbackQuery):
    dice_type = call.data.split('_')[1]
    bot.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω –∫—É–±–∏–∫ {dice_type}. –°–∫–æ–ª—å–∫–æ –±—Ä–æ—Å–∫–æ–≤?", 
        call.message.chat.id, 
        call.message.message_id,
        reply_markup=CharacterKeyboards.dice_count()
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('count_'))
def dice_count_selection(call: CallbackQuery):
    count = call.data.split('_')[1]
    dice_type = call.message.text.split()[-2]
    bot.edit_message_text(
        f"–í—ã–±—Ä–∞–Ω–æ {count} –∫—É–±–∏–∫–æ–≤ {dice_type}. –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä:", 
        call.message.chat.id, 
        call.message.message_id,
        reply_markup=CharacterKeyboards.modifier_selection()
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data.startswith('mod_'))
def final_dice_roll(call: CallbackQuery):
    modifier = int(call.data.split('_')[1])
    dice_info = call.message.text.split()
    count = int(dice_info[1])
    dice_type = dice_info[3]

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—Ä–æ—Å–∫–∞
    notation = f"{count}{dice_type}"
    if modifier > 0:
        notation += f"+{modifier}"
    
    result = DiceRoller.roll(notation)
    
    response = (
        f"üé≤ –ë—Ä–æ—Å–æ–∫ {notation}:\n"
        f"–ë—Ä–æ—Å–∫–∏: {result['rolls']}\n"
        f"–ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä: +{result['modifier']}\n"
        f"–ò—Ç–æ–≥–æ: {result['total']}"
    )
    
    bot.edit_message_text(
        response, 
        call.message.chat.id, 
        call.message.message_id,
        reply_markup=CharacterKeyboards.main_menu()
    )
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: m.text == "üßô –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞")
def start_character_creation(message: Message):
    user_id = message.from_user.id
    bot.reply_to(
        message, 
        "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–≥:", 
        reply_markup=CharacterKeyboards.character_creation_steps()
    )

@bot.callback_query_handler(func=lambda call: call.data == 'gen_stats')
def generate_character_stats(call: CallbackQuery):
    user_id = call.from_user.id
    ability_scores = DiceRoller.roll_ability_scores()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if user_id not in user_characters:
        user_characters[user_id] = {}
    
    user_characters[user_id]['ability_scores'] = {
        '–°–∏–ª–∞': ability_scores[0],
        '–õ–æ–≤–∫–æ—Å—Ç—å': ability_scores[1],
        '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ': ability_scores[2],
        '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç': ability_scores[3],
        '–ú—É–¥—Ä–æ—Å—Ç—å': ability_scores[4],
        '–•–∞—Ä–∏–∑–º–∞': ability_scores[5]
    }

    response = "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n" + "\n".join([
        f"{stat}: {value}" for stat, value in user_characters[user_id]['ability_scores'].items()
    ])

    bot.edit_message_text(
        response, 
        call.message.chat.id, 
        call.message.message_id,
        reply_markup=CharacterKeyboards.character_creation_steps()
    )
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == 'choose_name')
def choose_character_name(call: CallbackQuery):
    user_id = call.from_user.id
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è
    suggested_name = CharacterGenerator.generate_name()
    
    bot.edit_message_text(
        f"–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –∏–º—è: {suggested_name}\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–º—è –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ –∫–∞–∫ –µ—Å—Ç—å.", 
        call.message.chat.id, 
        call.message.message_id
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
    user_states[user_id] = CHARACTER_CREATION_STATES['waiting_for_name']
    user_characters[user_id]['name'] = suggested_name
    
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id) == 'name')
def save_character_name(message: Message):
    user_id = message.from_user.id
    user_characters[user_id]['name'] = message.text or user_characters[user_id]['name']
    
    del user_states[user_id]
    
    bot.reply_to(
        message, 
        f"–ò–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {user_characters[user_id]['name']}", 
        reply_markup=CharacterKeyboards.character_creation_steps()
    )

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º–∏...

def start_bot():
    print("ü§ñ D&D –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
